# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-04-07 21:52
from __future__ import unicode_literals

from django.db import migrations
from geoposition import Geoposition
from geoposition.fields import GeopositionField
import random
import string

from course_work.models import Location, Road


def gen_locations(apps, schema_editor):

    location_tuples = [
        ("Moscow", 55.7558, 37.6173),
        ("Saint-Petersburg", 59.9343, 30.3351),
        ("Tver", 56.8597,35.7493),
        ("Velikiy Novgorod", 58.5228,31.2718),
        ("Ryazan", 54.6053,39.7157),
        ("Penza", 53.2253,44.9985),
        ("Nizhniy Novgorod", 56.2850,43.9086),
        ("Yoshkar-Ola", 56.6354,47.8856),
        ("Cheboksary", 56.1139,47.2563),
        ("Kazan", 55.8094,49.0747),
        ("Samara", 53.2383,50.2227),
        ("Orenburg", 51.7646,55.0979),
        ("Naberezhnye Chelny", 55.7204,52.3944),
        ("Perm", 58.0205, 55.9540),
        ("Ekaterinburg", 56.8139,60.3747),
        ("Chelyabinsk", 55.1523,61.1283),
        ("Ufa", 54.8088,55.7406),
    ]

    roads = [
        ("Moscow", "Tver", 5),
        ("Tver", "Saint-Petersburg", 11),
        ("Saint-Petersburg", "Velikiy Novgorod", 5),
        ("Velikiy Novgorod", "Tver", 7),
        ("Moscow", "Ryazan", 5),
        ("Moscow", "Nizhniy Novgorod", 10),
        ("Penza", "Ryazan", 8),
        ("Cheboksary", "Nizhniy Novgorod", 5),
        ("Penza", "Samara", 9),
        ("Samara", "Kazan", 9),
        ("Yoshkar-Ola", "Nizhniy Novgorod", 5),
        ("Yoshkar-Ola", "Kazan", 6),
        ("Cheboksary", "Kazan", 4),
        ("Yoshkar-Ola", "Cheboksary", 2),
        ("Samara", "Orenburg", 8),
        ("Kazan", "Orenburg", 14),
        ("Kazan", "Perm", 13),
        ("Kazan", "Naberezhnye Chelny", 5),
        ("Perm", "Naberezhnye Chelny", 10),
        ("Orenburg", "Naberezhnye Chelny", 10),
        ("Orenburg", "Ufa", 7),
        ("Ufa", "Naberezhnye Chelny", 6),
        ("Ufa", "Chelyabinsk", 8),
        ("Perm", "Ekaterinburg", 8),
        ("Chelyabinsk", "Ekaterinburg", 4)
    ]

    locations = []

    for loc in location_tuples:
        location = Location(name=loc[0])
        location.point.latitude = loc[1]
        location.point.longitude = loc[2]
        location.save()
        locations.append(location)

    for r in roads:
        road = Road(start=[l for l in locations if l.name == r[0]][0],
                    end=[l for l in locations if l.name == r[1]][0],
                    time=r[2])
        road.save()

class Migration(migrations.Migration):

    dependencies = [ ('course_work', '0001_initial'),
    ]

    operations = [ migrations.RunPython(gen_locations, reverse_code=migrations.RunPython.noop),
    ]
